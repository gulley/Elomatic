<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elomatic - Elo Ranking</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom font */
        body {
            font-family: 'Inter', sans-serif;
        }
        /* Ensure consistent font usage */
        button, input, textarea, select, option {
            font-family: 'Inter', sans-serif;
        }

        /* Page transition placeholder - can be expanded */
        .view {
            display: none;
            animation: fadeIn 0.5s;
        }
        .view.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        /* Ranking animation styles */
        .rank-item-container {
            transition: transform 0.7s ease-in-out, opacity 0.7s ease-in-out;
            opacity: 1;
        }
        .rank-item-winner {
            transform: translateY(-30px) scale(1.05);
        }
        .rank-item-loser {
            transform: translateY(30px) scale(0.95);
            opacity: 0.7;
        }
        .score-change {
            font-weight: bold;
            margin-left: 8px;
        }
        .score-change-winner {
            color: #22c55e; /* green-500 */
        }
        .score-change-loser {
            color: #ef4444; /* red-500 */
        }
        .comparison-bar-container {
            width: 50px;
            height: 10px;
            background-color: #e5e7eb; /* gray-200 */
            border-radius: 5px;
            overflow: hidden;
            display: inline-block;
            margin-left: 10px;
        }
        .comparison-bar {
            height: 100%;
            background-color: #3b82f6; /* blue-500 */
            transition: width 0.3s ease;
        }
        /* Modal styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 100; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
            max-width: 500px;
            border-radius: 8px;
            text-align: center;
        }
        .modal-buttons button {
            margin: 0 10px;
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body class="bg-slate-100 text-slate-800 min-h-screen flex flex-col items-center pt-8 px-4">

    <div id="app" class="w-full max-w-3xl bg-white shadow-xl rounded-lg p-6 md:p-8">

        <div id="mainView" class="view active">
            <header class="mb-6">
                <h1 class="text-4xl font-bold text-center text-sky-600">Elomatic</h1>
                <p class="text-center text-slate-600 mt-2">Rank your items using Elo-style comparisons.</p>
            </header>

            <div class="mb-6 space-y-4 md:space-y-0 md:flex md:justify-between md:items-center">
                <div class="flex space-x-2">
                    <button id="switchToEditListBtn" class="bg-amber-500 hover:bg-amber-600 text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150">Edit List</button>
                    <button id="switchToRankBtn" class="bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150">Rank Items</button>
                </div>
                <div class="flex space-x-2">
                    <button id="resetScoresBtn" class="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150">Reset Scores</button>
                </div>
            </div>

            <div class="mb-6 p-4 border border-slate-300 rounded-lg bg-slate-50">
                <h2 class="text-xl font-semibold mb-3 text-slate-700">Add New Item</h2>
                <div class="flex flex-col sm:flex-row gap-3">
                    <input type="text" id="newItemTitle" placeholder="Item Title (Required)" class="flex-grow p-2 border border-slate-300 rounded-md focus:ring-sky-500 focus:border-sky-500">
                    <input type="url" id="newItemUrl" placeholder="URL (Optional)" class="flex-grow p-2 border border-slate-300 rounded-md focus:ring-sky-500 focus:border-sky-500">
                    <button id="addItemBtn" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150 sm:w-auto w-full">Add Item</button>
                </div>
            </div>

            <div class="mb-6">
                <h2 class="text-xl font-semibold mb-3 text-slate-700">Item List</h2>
                <div id="itemList" class="space-y-3">
                    <p class="text-slate-500">No items yet. Add some items or import a list!</p>
                </div>
            </div>

            <div class="mt-8 pt-6 border-t border-slate-300">
                <h2 class="text-xl font-semibold mb-3 text-slate-700">Data Management</h2>
                <div class="flex flex-col sm:flex-row gap-3">
                    <label class="block">
                        <span class="sr-only">Choose CSV file</span>
                        <input type="file" id="importCsvBtn" accept=".csv" class="block w-full text-sm text-slate-500
                          file:mr-4 file:py-2 file:px-4
                          file:rounded-lg file:border-0
                          file:text-sm file:font-semibold
                          file:bg-sky-50 file:text-sky-700
                          hover:file:bg-sky-100
                        "/>
                    </label>
                    <button id="exportCsvBtn" class="bg-slate-500 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150 sm:w-auto w-full">Export to CSV</button>
                </div>
                <p class="text-xs text-slate-500 mt-2">CSV format: Title,URL,Score. Score is optional on import (defaults to 1500).</p>
            </div>
             <p class="text-sm text-slate-500 mt-6">
                <strong>Instructions:</strong>
                <ul class="list-disc list-inside ml-4">
                    <li>Add items using the form above.</li>
                    <li>Click "Rank Items" to start comparing.</li>
                    <li>"Edit List" allows bulk additions/deletions.</li>
                    <li>Scores are saved automatically in your browser.</li>
                </ul>
            </p>
        </div>

        <div id="editListView" class="view">
            <h1 class="text-3xl font-bold mb-6 text-center text-sky-600">Edit Item List</h1>
            <p class="text-slate-600 mb-4">
                Edit items in bulk below. Each line should be in the format: <code>Title</code> or <code>Title,URL</code>.
                New items will be added with a default score. Existing items not found in the text area will be removed.
            </p>
            <textarea id="bulkEditTextarea" rows="15" class="w-full p-3 border border-slate-300 rounded-md focus:ring-sky-500 focus:border-sky-500 mb-4" placeholder="Item One\nItem Two,http://example.com/item2\nItem Three"></textarea>
            <div class="flex justify-end space-x-3">
                <button id="cancelBulkEditBtn" class="bg-slate-400 hover:bg-slate-500 text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150">Cancel</button>
                <button id="saveBulkEditBtn" class="bg-sky-500 hover:bg-sky-600 text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150">Save Changes</button>
            </div>
        </div>

        <div id="rankingView" class="view">
            <h1 class="text-3xl font-bold mb-2 text-center text-sky-600">Rank Items</h1>
            <p id="rankingInstructions" class="text-center text-slate-600 mb-8">Which item is better? Click to choose.</p>

            <div id="rankingPairContainer" class="space-y-6">
                </div>
            <div id="notEnoughItemsMessage" class="text-center text-red-500 font-semibold py-10 hidden">
                <p>You need at least two items to start ranking. Please add more items.</p>
            </div>

            <div class="mt-10 text-center">
                <button id="backToMainFromRankingBtn" class="bg-slate-500 hover:bg-slate-600 text-white font-semibold py-2 px-4 rounded-lg shadow transition duration-150">Back to Main List</button>
            </div>
        </div>
    </div>

    <div id="confirmationModal" class="modal">
        <div class="modal-content">
            <p id="modalMessageText" class="text-lg mb-6">Are you sure?</p>
            <div class="modal-buttons">
                <button id="modalConfirmBtn" class="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg shadow">Confirm</button>
                <button id="modalCancelBtn" class="bg-slate-300 hover:bg-slate-400 text-slate-800 font-semibold py-2 px-4 rounded-lg shadow">Cancel</button>
            </div>
        </div>
    </div>

    <script>
        // --- Constants ---
        const ELO_DEFAULT_SCORE = 1500;
        const ELO_K_FACTOR = 32;
        const LOCAL_STORAGE_KEY = 'elomatic_items';

        // --- State ---
        let items = [];
        let currentView = 'mainView'; // mainView, editListView, rankingView
        let unsavedChangesInBulkEdit = false;
        let onConfirmAction = null; // Callback for modal confirmation

        // --- DOM Elements ---
        const views = {
            mainView: document.getElementById('mainView'),
            editListView: document.getElementById('editListView'),
            rankingView: document.getElementById('rankingView'),
        };
        const itemListEl = document.getElementById('itemList');
        const newItemTitleInput = document.getElementById('newItemTitle');
        const newItemUrlInput = document.getElementById('newItemUrl');
        const addItemBtn = document.getElementById('addItemBtn');
        const switchToEditListBtn = document.getElementById('switchToEditListBtn');
        const switchToRankBtn = document.getElementById('switchToRankBtn');
        const resetScoresBtn = document.getElementById('resetScoresBtn');
        const importCsvBtn = document.getElementById('importCsvBtn');
        const exportCsvBtn = document.getElementById('exportCsvBtn');
        // Edit List View
        const bulkEditTextarea = document.getElementById('bulkEditTextarea');
        const saveBulkEditBtn = document.getElementById('saveBulkEditBtn');
        const cancelBulkEditBtn = document.getElementById('cancelBulkEditBtn');
        // Ranking View
        const rankingPairContainer = document.getElementById('rankingPairContainer');
        const rankingInstructions = document.getElementById('rankingInstructions');
        const notEnoughItemsMessage = document.getElementById('notEnoughItemsMessage');
        const backToMainFromRankingBtn = document.getElementById('backToMainFromRankingBtn');
        // Modal
        const confirmationModal = document.getElementById('confirmationModal');
        const modalMessageText = document.getElementById('modalMessageText');
        const modalConfirmBtn = document.getElementById('modalConfirmBtn');
        const modalCancelBtn = document.getElementById('modalCancelBtn');


        // --- Utility Functions ---
        function generateId() {
            return Date.now().toString(36) + Math.random().toString(36).substring(2);
        }

        function saveItems() {
            try {
                localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(items));
            } catch (error) {
                console.error("Error saving items to localStorage:", error);
                alert("Could not save items. Your browser's local storage might be full or disabled.");
            }
        }

        function loadItems() {
            try {
                const storedItems = localStorage.getItem(LOCAL_STORAGE_KEY);
                if (storedItems) {
                    items = JSON.parse(storedItems);
                    // Ensure all items have necessary properties
                    items.forEach(item => {
                        if (item.comparisons === undefined) item.comparisons = 0;
                        if (item.id === undefined) item.id = generateId(); // Add ID if missing from older versions
                    });
                } else {
                    items = [];
                }
            } catch (error) {
                console.error("Error loading items from localStorage:", error);
                items = []; // Reset to empty if loading fails
                alert("Could not load items from previous session. Data might be corrupted.");
            }
        }

        function calculateElo(winnerElo, loserElo) {
            const probWinner = 1.0 / (1.0 + Math.pow(10, (loserElo - winnerElo) / 400));
            const probLoser = 1.0 / (1.0 + Math.pow(10, (winnerElo - loserElo) / 400));

            const newWinnerElo = winnerElo + ELO_K_FACTOR * (1 - probWinner);
            const newLoserElo = loserElo + ELO_K_FACTOR * (0 - probLoser);

            return {
                winnerNewElo: Math.round(newWinnerElo),
                loserNewElo: Math.round(newLoserElo)
            };
        }

        // --- UI Rendering Functions ---
        function switchView(viewName) {
            currentView = viewName;
            Object.values(views).forEach(view => view.classList.remove('active'));
            if (views[viewName]) {
                views[viewName].classList.add('active');
            } else {
                console.error("View not found:", viewName);
                views.mainView.classList.add('active'); // Fallback to main view
            }

            // Specific actions when switching to a view
            if (viewName === 'mainView') {
                renderItemList();
            } else if (viewName === 'editListView') {
                loadItemsToTextArea();
                unsavedChangesInBulkEdit = false;
            } else if (viewName === 'rankingView') {
                displayRankingPair();
            }
        }

        function renderItemList() {
            itemListEl.innerHTML = ''; // Clear existing list

            if (items.length === 0) {
                itemListEl.innerHTML = '<p class="text-slate-500">No items yet. Add some items or import a list!</p>';
                return;
            }

            const sortedItems = [...items].sort((a, b) => b.elo - a.elo);
            const maxComparisons = Math.max(1, ...items.map(item => item.comparisons)); // Avoid division by zero

            sortedItems.forEach(item => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'p-4 bg-white border border-slate-200 rounded-lg shadow-sm flex justify-between items-center';

                const contentDiv = document.createElement('div');
                const titleEl = document.createElement('h3');
                titleEl.className = 'text-lg font-medium text-slate-800';
                titleEl.textContent = item.title;
                contentDiv.appendChild(titleEl);

                if (item.url) {
                    const urlEl = document.createElement('a');
                    urlEl.href = item.url;
                    urlEl.textContent = item.url;
                    urlEl.target = '_blank';
                    urlEl.rel = 'noopener noreferrer';
                    urlEl.className = 'text-sm text-sky-600 hover:text-sky-800 underline break-all';
                    contentDiv.appendChild(urlEl);
                }

                const scoreEl = document.createElement('p');
                scoreEl.className = 'text-sm text-slate-500 mt-1';
                scoreEl.textContent = `Elo: ${item.elo}`;
                contentDiv.appendChild(scoreEl);

                // Comparison frequency indicator
                const comparisonContainer = document.createElement('div');
                comparisonContainer.className = 'flex items-center mt-1';
                const comparisonText = document.createElement('span');
                comparisonText.className = 'text-xs text-slate-500';
                comparisonText.textContent = `Compared: ${item.comparisons} `;
                comparisonContainer.appendChild(comparisonText);

                const barContainer = document.createElement('div');
                barContainer.className = 'comparison-bar-container';
                const bar = document.createElement('div');
                bar.className = 'comparison-bar';
                const comparisonPercentage = (item.comparisons / maxComparisons) * 100;
                bar.style.width = `${Math.min(100, comparisonPercentage)}%`; // Cap at 100%
                barContainer.appendChild(bar);
                comparisonContainer.appendChild(barContainer);
                contentDiv.appendChild(comparisonContainer);

                itemDiv.appendChild(contentDiv);

                const deleteBtn = document.createElement('button');
                deleteBtn.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="text-red-500 hover:text-red-700" viewBox="0 0 16 16">
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                    </svg>`;
                deleteBtn.title = "Delete Item";
                deleteBtn.className = 'ml-4 p-2 rounded-full hover:bg-red-100 transition-colors';
                deleteBtn.onclick = () => handleDeleteItem(item.id);
                itemDiv.appendChild(deleteBtn);

                itemListEl.appendChild(itemDiv);
            });
        }

        function displayRankingPair() {
            rankingPairContainer.innerHTML = ''; // Clear previous pair
            notEnoughItemsMessage.classList.add('hidden');
            rankingPairContainer.classList.remove('hidden');
            rankingInstructions.classList.remove('hidden');


            if (items.length < 2) {
                notEnoughItemsMessage.classList.remove('hidden');
                rankingPairContainer.classList.add('hidden');
                rankingInstructions.classList.add('hidden');
                return;
            }

            // Simple random selection for now. Could be improved to pick less compared items.
            let index1 = Math.floor(Math.random() * items.length);
            let index2 = Math.floor(Math.random() * items.length);
            while (index1 === index2) {
                index2 = Math.floor(Math.random() * items.length);
            }

            const item1 = items[index1];
            const item2 = items[index2];

            const createItemCard = (item, opponentId) => {
                const card = document.createElement('div');
                card.className = 'rank-item-container p-6 bg-white border-2 border-sky-500 rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 cursor-pointer text-center';
                card.dataset.itemId = item.id;
                card.dataset.opponentId = opponentId;

                const title = document.createElement('h3');
                title.className = 'text-2xl font-semibold text-sky-700 mb-2';
                title.textContent = item.title;
                card.appendChild(title);

                if (item.url) {
                    const url = document.createElement('a');
                    url.href = item.url;
                    url.target = '_blank';
                    url.rel = 'noopener noreferrer';
                    url.textContent = item.url;
                    url.className = 'text-sm text-sky-500 hover:underline break-all block mb-2';
                    url.onclick = (e) => e.stopPropagation(); // Prevent card click when URL is clicked
                    card.appendChild(url);
                }

                const currentScore = document.createElement('p');
                currentScore.className = 'text-slate-600';
                currentScore.textContent = `Elo: ${item.elo}`;
                currentScore.id = `score-display-${item.id}`; // For updating during animation
                card.appendChild(currentScore);

                const newScoreChange = document.createElement('span'); // For showing score change
                newScoreChange.id = `score-change-${item.id}`;
                newScoreChange.className = 'score-change';
                card.appendChild(newScoreChange);


                card.onclick = () => handleRankingSelection(item.id, opponentId);
                return card;
            };

            const itemCard1 = createItemCard(item1, item2.id);
            const itemCard2 = createItemCard(item2, item1.id);

            rankingPairContainer.appendChild(itemCard1);
            rankingPairContainer.appendChild(itemCard2);
        }

        // --- Event Handlers & Actions ---
        function handleAddItem() {
            const title = newItemTitleInput.value.trim();
            const url = newItemUrlInput.value.trim();

            if (!title) {
                alert("Item title is required.");
                newItemTitleInput.focus();
                return;
            }

            items.push({
                id: generateId(),
                title: title,
                url: url,
                elo: ELO_DEFAULT_SCORE,
                comparisons: 0
            });

            newItemTitleInput.value = '';
            newItemUrlInput.value = '';
            saveItems();
            renderItemList();
            newItemTitleInput.focus();
        }

        function handleDeleteItem(itemId) {
            showConfirmationModal(`Are you sure you want to delete this item? This action cannot be undone.`, () => {
                items = items.filter(item => item.id !== itemId);
                saveItems();
                renderItemList();
                if (currentView === 'rankingView') displayRankingPair(); // Refresh if ranking
            });
        }

        function handleResetScores() {
             showConfirmationModal(`Are you sure you want to reset all scores to ${ELO_DEFAULT_SCORE}? Items will not be deleted.`, () => {
                items.forEach(item => {
                    item.elo = ELO_DEFAULT_SCORE;
                    item.comparisons = 0; // Also reset comparison count
                });
                saveItems();
                renderItemList();
                if (currentView === 'rankingView') displayRankingPair(); // Refresh scores if ranking
            });
        }

        function handleExportCSV() {
            if (items.length === 0) {
                alert("No items to export.");
                return;
            }
            const csvHeader = "Title,URL,Score,Comparisons\n";
            const csvRows = items.map(item =>
                `"${item.title.replace(/"/g, '""')}","${item.url ? item.url.replace(/"/g, '""') : ''}",${item.elo},${item.comparisons}`
            ).join("\n");

            const csvString = csvHeader + csvRows;
            const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement("a");
            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", "elomatic_items.csv");
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } else {
                alert("CSV export is not supported in your browser.");
            }
        }

        function handleImportCSV(event) {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (e) => {
                const text = e.target.result;
                try {
                    const importedItems = [];
                    const lines = text.split(/\r\n|\n/);
                    // Skip header if present by checking content of first line
                    const firstLineIsHeader = lines[0].toLowerCase().includes("title") && lines[0].toLowerCase().includes("score");
                    const dataLines = firstLineIsHeader ? lines.slice(1) : lines;

                    dataLines.forEach(line => {
                        if (line.trim() === '') return; // Skip empty lines

                        // Basic CSV parsing (split by comma, handle quoted fields)
                        const values = [];
                        let currentVal = '';
                        let inQuotes = false;
                        for (let char of line) {
                            if (char === '"') {
                                inQuotes = !inQuotes;
                            } else if (char === ',' && !inQuotes) {
                                values.push(currentVal.trim());
                                currentVal = '';
                            } else {
                                currentVal += char;
                            }
                        }
                        values.push(currentVal.trim()); // Add last value

                        const title = values[0] ? values[0].replace(/^"|"$/g, '') : ''; // Remove surrounding quotes
                        const url = values[1] ? values[1].replace(/^"|"$/g, '') : '';
                        const score = values[2] ? parseInt(values[2], 10) : ELO_DEFAULT_SCORE;
                        const comparisons = values[3] ? parseInt(values[3], 10) : 0;


                        if (title) { // Title is required
                            importedItems.push({
                                id: generateId(),
                                title: title,
                                url: url,
                                elo: isNaN(score) ? ELO_DEFAULT_SCORE : score,
                                comparisons: isNaN(comparisons) ? 0 : comparisons
                            });
                        }
                    });

                    if (importedItems.length > 0) {
                         showConfirmationModal(`Import ${importedItems.length} items? This will replace your current list.`, () => {
                            items = importedItems;
                            saveItems();
                            renderItemList();
                            alert("Items imported successfully.");
                        });
                    } else {
                        alert("No valid items found in CSV file or file was empty.");
                    }
                } catch (error) {
                    console.error("Error parsing CSV:", error);
                    alert("Failed to import CSV. Please check the file format (Title,URL,Score) and try again.");
                } finally {
                    event.target.value = null; // Reset file input
                }
            };
            reader.readAsText(file);
        }

        function loadItemsToTextArea() {
            bulkEditTextarea.value = items.map(item => {
                let line = item.title;
                if (item.url) {
                    line += `,${item.url}`;
                }
                return line;
            }).join("\n");
            unsavedChangesInBulkEdit = false; // Reset flag
        }

        function handleSaveBulkEdit() {
            const text = bulkEditTextarea.value;
            const lines = text.split("\n");
            const newItems = [];
            const existingTitles = new Set(); // To track titles for potential removal later (if needed)

            lines.forEach(line => {
                line = line.trim();
                if (!line) return;

                const parts = line.split(',');
                const title = parts[0].trim();
                const url = parts.length > 1 ? parts.slice(1).join(',').trim() : ''; // Handle commas in URL

                if (title) {
                    // Try to find existing item to preserve its score and ID
                    const existingItem = items.find(it => it.title === title);
                    if (existingItem) {
                        newItems.push({ ...existingItem, url: url }); // Update URL if changed
                        existingTitles.add(title);
                    } else {
                         newItems.push({
                            id: generateId(),
                            title: title,
                            url: url,
                            elo: ELO_DEFAULT_SCORE,
                            comparisons: 0
                        });
                        existingTitles.add(title);
                    }
                }
            });

            // Optional: Decide if items not in textarea should be removed.
            // Current prompt implies text area is the source of truth.
            // So, items not in the new list (based on title) are removed.
            // A more sophisticated approach might use IDs if titles can change.
            const itemsToKeep = [];
            newItems.forEach(newItem => {
                const oldItem = items.find(i => i.id === newItem.id);
                if(oldItem){ // Item existed
                    itemsToKeep.push({...oldItem, title: newItem.title, url: newItem.url});
                } else { // New item
                    itemsToKeep.push(newItem);
                }
            });


            // A simpler interpretation: the textarea *replaces* the list.
            // This is what the prompt seems to imply for "bulk editing".
            items = newItems;

            saveItems();
            alert("List updated successfully.");
            switchView('mainView');
            unsavedChangesInBulkEdit = false;
        }


        function handleCancelBulkEdit() {
            if (unsavedChangesInBulkEdit) {
                 showConfirmationModal("You have unsaved changes. Are you sure you want to cancel?", () => {
                    switchView('mainView');
                });
            } else {
                switchView('mainView');
            }
        }

        bulkEditTextarea.addEventListener('input', () => {
            unsavedChangesInBulkEdit = true;
        });


        function handleRankingSelection(winnerId, loserId) {
            const winner = items.find(item => item.id === winnerId);
            const loser = items.find(item => item.id === loserId);

            if (!winner || !loser) {
                console.error("Error finding items for ranking.");
                displayRankingPair(); // Try to show a new pair
                return;
            }

            const oldWinnerElo = winner.elo;
            const oldLoserElo = loser.elo;

            const { winnerNewElo, loserNewElo } = calculateElo(winner.elo, loser.elo);

            winner.elo = winnerNewElo;
            loser.elo = loserNewElo;
            winner.comparisons += 1;
            loser.comparisons += 1;

            saveItems();

            // Animation part
            const winnerCard = rankingPairContainer.querySelector(`[data-item-id="${winnerId}"]`);
            const loserCard = rankingPairContainer.querySelector(`[data-item-id="${loserId}"]`);
            const winnerScoreDisplay = document.getElementById(`score-display-${winnerId}`);
            const loserScoreDisplay = document.getElementById(`score-display-${loserId}`);
            const winnerScoreChange = document.getElementById(`score-change-${winnerId}`);
            const loserScoreChange = document.getElementById(`score-change-${loserId}`);


            if (winnerCard && loserCard && winnerScoreDisplay && loserScoreDisplay && winnerScoreChange && loserScoreChange) {
                // Disable further clicks during animation
                winnerCard.onclick = null;
                loserCard.onclick = null;

                winnerCard.classList.add('rank-item-winner');
                loserCard.classList.add('rank-item-loser');

                winnerScoreDisplay.textContent = `Elo: ${winnerNewElo}`;
                loserScoreDisplay.textContent = `Elo: ${loserNewElo}`;

                const winnerDiff = winnerNewElo - oldWinnerElo;
                const loserDiff = loserNewElo - oldLoserElo;

                winnerScoreChange.textContent = `(${winnerDiff >= 0 ? '+' : ''}${winnerDiff})`;
                winnerScoreChange.className = winnerDiff >= 0 ? 'score-change score-change-winner' : 'score-change score-change-loser';

                loserScoreChange.textContent = `(${loserDiff >= 0 ? '+' : ''}${loserDiff})`;
                loserScoreChange.className = loserDiff >= 0 ? 'score-change score-change-winner' : 'score-change score-change-loser';


                setTimeout(() => {
                    // Reset classes for next pair (though displayRankingPair clears and recreates)
                    winnerCard.classList.remove('rank-item-winner');
                    loserCard.classList.remove('rank-item-loser');
                    displayRankingPair(); // Display next pair
                }, 1500); // Animation duration + a little buffer
            } else {
                // If elements not found, skip animation and just show next pair
                displayRankingPair();
            }
        }

        // --- Modal Functions ---
        function showConfirmationModal(message, onConfirm) {
            modalMessageText.textContent = message;
            onConfirmAction = onConfirm;
            confirmationModal.style.display = "block";
        }

        function hideConfirmationModal() {
            confirmationModal.style.display = "none";
            onConfirmAction = null;
        }

        modalConfirmBtn.addEventListener('click', () => {
            if (typeof onConfirmAction === 'function') {
                onConfirmAction();
            }
            hideConfirmationModal();
        });

        modalCancelBtn.addEventListener('click', () => {
            hideConfirmationModal();
        });

        // Close modal if clicked outside of it
        window.onclick = function(event) {
            if (event.target == confirmationModal) {
                hideConfirmationModal();
            }
        }


        // --- Event Listeners ---
        addItemBtn.addEventListener('click', handleAddItem);
        newItemTitleInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') handleAddItem(); });
        newItemUrlInput.addEventListener('keypress', (e) => { if (e.key === 'Enter') handleAddItem(); });

        resetScoresBtn.addEventListener('click', handleResetScores);
        exportCsvBtn.addEventListener('click', handleExportCSV);
        importCsvBtn.addEventListener('change', handleImportCSV);

        switchToEditListBtn.addEventListener('click', () => switchView('editListView'));
        switchToRankBtn.addEventListener('click', () => switchView('rankingView'));

        // Edit List View buttons
        saveBulkEditBtn.addEventListener('click', handleSaveBulkEdit);
        cancelBulkEditBtn.addEventListener('click', handleCancelBulkEdit);

        // Ranking View buttons
        backToMainFromRankingBtn.addEventListener('click', () => switchView('mainView'));


        // --- Initialization ---
        function init() {
            loadItems();
            switchView('mainView'); // Start with the main view
            renderItemList(); // Initial render
        }

        document.addEventListener('DOMContentLoaded', init);

    </script>
</body>
</html>
